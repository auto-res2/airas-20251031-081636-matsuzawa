name: Run Trial Experiment with Claude Code (v2)

on:
  workflow_dispatch:
    inputs:
      run_ids:
        description: 'A JSON array of run_ids to process'
        required: true
      experiment_iteration:
        description: "Iteration count"
        required: true
      runner_type:
        description: 'Runner type (e.g., ["ubuntu-latest"], ["self-hosted", "A100"])'
        required: true
        default: '["ubuntu-latest"]'
      model_name:
        description: "Model to use"
        required: true
        default: 'anthropic/claude-sonnet-4-5-20250929'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write
  actions: write

defaults:
  run:
    shell: bash

# Why jobs are split into `run-experiment` and `fix-and-rerun`:
# 1. Runner Stability: The AI agent (fix-and-rerun) is kept on a CPU runner to prevent
#    bus errors that can occur on GPU environments.
# 2. Reliable Error Analysis: This separation ensures experiment logs are saved as artifacts
#    upon failure. If run in a single job, the agent's retry logic could lose the
#    original error context, making a fix impossible.

jobs:
  setup:
    name: Setup for Sequential Run
    runs-on: ubuntu-latest
    outputs:
      current_run_id: ${{ steps.parse.outputs.current_run_id }}
      remaining_run_ids: ${{ steps.parse.outputs.remaining_run_ids }}
      is_empty: ${{ steps.parse.outputs.is_empty }}

    steps:
      - name: Parse run_ids list
        id: parse
        run: |
          RUN_IDS='${{ github.event.inputs.run_ids }}'
          
          if [[ $(echo "$RUN_IDS" | jq 'length') -eq 0 ]]; then
            echo "All run_ids have been processed."
            echo "is_empty=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_empty=false" >> "$GITHUB_OUTPUT"
            CURRENT_ID=$(echo "$RUN_IDS" | jq -r '.[0]')
            REMAINING_IDS=$(echo "$RUN_IDS" | jq -c '.[1:]')
            echo "current_run_id=$CURRENT_ID" >> "$GITHUB_OUTPUT"
            echo "remaining_run_ids=$REMAINING_IDS" >> "$GITHUB_OUTPUT"

            echo "Processing run_id: $CURRENT_ID"
            echo "Remaining run_ids: $REMAINING_IDS"
          fi


  run-trial-experiment:
    name: Run Trial for ${{ needs.setup.outputs.current_run_id }}
    needs: setup
    if: needs.setup.outputs.is_empty == 'false'
    runs-on: ${{ fromJSON(github.event.inputs.runner_type) }}
    timeout-minutes: 120

    outputs:
      experiment_passed: ${{ steps.check-result.outputs.passed }}
    
    env:
      RESULTS_DIR: ".research/iteration${{ github.event.inputs.experiment_iteration }}"
      RUN_ID: ${{ needs.setup.outputs.current_run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"

      - name: Prepare results dir
        run: mkdir -p "$RESULTS_DIR"

      - name: Run trial experiment
        id: run-exp
        continue-on-error: true
        run: |
          trap 'sleep 1' EXIT
          (
            set -e
            set -o pipefail

            echo "=== [UV SYNC] Start at $(date -u) ==="
            uv sync
            echo "=== [UV SYNC] Finished successfully at $(date -u) ==="
          
            echo "=== [TRIAL RUN] Start for $RUN_ID at $(date -u) ==="
            uv run python -u -m src.main \
              run=$RUN_ID \
              results_dir="$RESULTS_DIR" \
              mode=trial
            echo -e "=== [TRIAL RUN] PASSED for $RUN_ID at $(date -u) ===\n"
          )> >(tee -a "$RESULTS_DIR/stdout.txt") 2> >(tee -a "$RESULTS_DIR/stderr.txt" >&2)

      - name: Check result
        id: check-result
        run: |
          if [[ "${{ steps.run-exp.outcome }}" == "success" ]] && grep -q "\[TRIAL RUN\] PASSED" "$RESULTS_DIR/stdout.txt"; then
            echo "✅ Trial passed for $RUN_ID"
            echo "passed=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Trial failed for $RUN_ID"
            echo "passed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trial-results-${{ github.run.id }}-${{ env.RUN_ID }}
          path: ${{ env.RESULTS_DIR }}

  fix-and-rerun:
    name: Fix and Re-run Trial
    needs: [setup, run-trial-experiment]
    if: needs.setup.outputs.is_empty == 'false' && needs.run-trial-experiment.outputs.experiment_passed == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      RESULTS_DIR: ".research/iteration${{ github.event.inputs.experiment_iteration }}"
      SEARCH_HF_COMMAND: |
        curl -s -G \
          -H "Authorization: Bearer $HF_TOKEN" \
          --data-urlencode "search=${SEARCH_TERM}" \
          --data-urlencode "sort=likes" \
          --data-urlencode "limit=10" \
          --data-urlencode "direction=-1" \
          --data-urlencode "full=true" \
          "https://huggingface.co/api/${RESOURCE_TYPE}" \
        | jq -r '(.results // .) | map(select(.gated == false and .private == false and .disabled == false)) | .[0]?.id // empty'
      PROMPT: |
        Your task is to correct the code for the experiment associated with run ID ${{ needs.setup.outputs.current_run_id }}. 
        You have been granted full tool access. 

        Your operational environment is a standard CPU-only runner without GPUs. 
        Any attempt to run the experiment code will fail and lead to incorrect conclusions. Your sole responsibility is to **modify the code to make it runnable**. 
        The actual experiment will be executed in a separate, GPU-enabled environment after your corrections.

        ERROR INFORMATION:
        The error logs are available in the file: $RESULTS_DIR/error_summary.txt
        Read this file to understand what went wrong. DO NOT read stdout.txt or stderr.txt as they contain verbose training logs.

        Guiding Principles:
        - Scope: Do not perform any Git operations like commit or push. Your only task is to fix the code to make it executable.
        - Method: When fixing errors, you MUST only modify existing files; do not create or delete any files.
        - Autonomy: Perform all correction steps autonomously. Do not ask for permission.
        - Resource Errors: If a Hugging Face resource is unavailable, you MUST find and implement a public alternative. To do this, you MUST first set two variables:
          1.  `RESOURCE_TYPE`: Set to either `"models"` or `"datasets"`.
          2.  `SEARCH_TERM`: Set to the resource name from the error to find a corrected or alternative ID.
          Then, execute `bash -c "$SEARCH_HF_COMMAND"` to get the best alternative ID and update the code.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download experiment results
        uses: actions/download-artifact@v4
        with:
          name: trial-results-${{ github.run.id }}-${{ needs.setup.outputs.current_run_id }}
          path: ${{ env.RESULTS_DIR }}

      - name: Extract error summary
        run: |
          if [ -f "$RESULTS_DIR/stderr.txt" ]; then
            echo "=== ERROR SUMMARY (Last 100 lines of stderr) ===" > "$RESULTS_DIR/error_summary.txt"
            tail -n 100 "$RESULTS_DIR/stderr.txt" >> "$RESULTS_DIR/error_summary.txt"
          fi

          if [ -f "$RESULTS_DIR/stdout.txt" ]; then
            echo -e "\n=== RELEVANT STDOUT (Error/Exception lines) ===" >> "$RESULTS_DIR/error_summary.txt"
            grep -i -E "(error|exception|traceback|failed|fatal)" "$RESULTS_DIR/stdout.txt" | tail -n 50 >> "$RESULTS_DIR/error_summary.txt" || echo "No error patterns found in stdout" >> "$RESULTS_DIR/error_summary.txt"
          fi
          
          cat "$RESULTS_DIR/error_summary.txt"

      - name: Claude Code Autonomous Run, Fix, and Validate Loop
        uses: anthropics/claude-code-action@v1
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: ${{ env.PROMPT }}
          claude_args: "--max-turns=100 --allowed-tools Bash,Write,Edit,MultiEdit,TodoWrite"

      - name: Commit and push fix
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git add --update .

          if ! git diff --staged --quiet; then
            git commit -m "[CI] Automated fix for run_id=${{ needs.setup.outputs.current_run_id }}"
            for i in {1..5}; do
              git pull --rebase && git push && break
              echo "Push failed on attempt $i. Retrying in $((2**i)) seconds..."
              sleep $((2**i))
            done
          else
            echo "OpenCode made no changes to the code."
          fi

      - name: Trigger next iteration
        run: |
          echo "Re-running workflow"
          gh workflow run "${{ github.workflow }}" --ref ${{ github.ref }} \
            -f run_ids='${{ github.event.inputs.run_ids }}' \
            -f experiment_iteration="${{ github.event.inputs.experiment_iteration }}" \
            -f runner_type='${{ github.event.inputs.runner_type }}' \
            -f model_name='${{ github.event.inputs.model_name }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-next-run:
    name: Trigger Next Run in Sequence
    needs: [setup, run-trial-experiment]
    if: needs.setup.outputs.is_empty == 'false' && needs.run-trial-experiment.outputs.experiment_passed == 'true'
    runs-on: ubuntu-latest

    env: 
      RESULTS_DIR: ".research/iteration${{ github.event.inputs.experiment_iteration }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download experiment results
        uses: actions/download-artifact@v4
        with:
          name: trial-results-${{ github.run.id }}-${{ needs.setup.outputs.current_run_id }}
          path: ${{ env.RESULTS_DIR }}

      - name: Commit and push successful trial result
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git add .research/
          if ! git diff --staged --quiet; then
            git commit -m "[CI] Add successful trial results for run_id=${{ needs.setup.outputs.current_run_id }}"
            for i in {1..5}; do
              git pull --rebase && git push && break
              echo "Push failed on attempt $i. Retrying in $((2**i)) seconds..."
              sleep $((2**i))
            done
          else
            echo "No changes to commit"
          fi

      - name: Trigger workflow with remaining list
        run: |
          REMAINING_IDS='${{ needs.setup.outputs.remaining_run_ids }}'
          if [[ $(echo "$REMAINING_IDS" | jq 'length') -eq 0 ]]; then
            echo "Successfully completed all run_ids."
          else
            echo "Triggering next run with remaining run_ids: $REMAINING_IDS"
            gh workflow run "${{ github.workflow }}" --ref ${{ github.ref }} \
              -f run_ids="$REMAINING_IDS" \
              -f experiment_iteration="${{ github.event.inputs.experiment_iteration }}" \
              -f runner_type='${{ github.event.inputs.runner_type }}' \
              -f model_name='${{ github.event.inputs.model_name }}'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}